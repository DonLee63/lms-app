import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../../providers/attendance_provider.dart';
import '../../providers/course_provider.dart';

class StudentAttendanceScreen extends ConsumerWidget {
  final int studentId;

  const StudentAttendanceScreen({super.key, required this.studentId});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final timetableAsync = ref.watch(timetableProvider(studentId));
    final today = DateFormat('yyyy-MM-dd').format(DateTime.now()); // L·∫•y ng√†y hi·ªán t·∫°i

    return Scaffold(
      appBar: AppBar(title: const Text("ƒêi·ªÉm danh sinh vi√™n")),
      body: timetableAsync.when(
        data: (timetable) {
          // L·ªçc danh s√°ch bu·ªïi h·ªçc ch·ªâ l·∫•y c·ªßa h√¥m nay
          final todayClasses = timetable.where((schedule) => schedule['ngay'] == today).toList();

          if (todayClasses.isEmpty) {
            return const Center(child: Text("H√¥m nay kh√¥ng c√≥ bu·ªïi h·ªçc n√†o."));
          }

          return ListView.builder(
            itemCount: todayClasses.length,
            itemBuilder: (context, index) {
              final schedule = todayClasses[index];
              final tkbId = schedule['timetable_id']; // ID c·ªßa bu·ªïi h·ªçc
              final subjectName = schedule['title']; // T√™n m√¥n h·ªçc
              final time = schedule['time'] ?? 'Kh√¥ng r√µ gi·ªù'; // Gi·∫£ ƒë·ªãnh c√≥ tr∆∞·ªùng time trong timetable
              final attendanceStatusAsync = ref.watch(attendanceListProvider(tkbId));

              return Card(
                margin: const EdgeInsets.all(8.0),
                child: ListTile(
                  title: Text(subjectName, style: const TextStyle(fontWeight: FontWeight.bold)),
                  subtitle: Text("Ng√†y: ${schedule['ngay']} | Gi·ªù: $time"),
                  trailing: attendanceStatusAsync.when(
                    data: (attendanceData) {
                      final presentStudents = attendanceData["present"] as List<dynamic>? ?? [];
                      final absentStudents = attendanceData["absent"] as List<dynamic>? ?? [];

                      // Ki·ªÉm tra xem sinh vi√™n ƒë√£ ƒëi·ªÉm danh ch∆∞a (d·ª±a tr√™n student_id trong object)
                      final hasMarked = presentStudents.any((student) => student['student_id'] == studentId);

                      // X√°c ƒë·ªãnh tr·∫°ng th√°i ƒëi·ªÉm danh d·ª±a tr√™n d·ªØ li·ªáu
                      final isAttendanceOpen = presentStudents.isNotEmpty || absentStudents.isNotEmpty;

                      return hasMarked
                          ? const Text("‚úÖ ƒê√£ ƒëi·ªÉm danh", style: TextStyle(color: Colors.green))
                          : isAttendanceOpen
                              ? ElevatedButton(
                                  onPressed: () => _markAttendance(context, ref, tkbId, studentId),
                                  style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
                                  child: const Text("ƒêi·ªÉm danh"),
                                )
                              : const Text("üö´ ƒêi·ªÉm danh ƒë√£ ƒë√≥ng", style: TextStyle(color: Colors.red));
                    },
                    loading: () => const CircularProgressIndicator(),
                    error: (error, stack) => const Icon(Icons.error, color: Colors.red),
                  ),
                ),
              );
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text("L·ªói: $error")),
      ),
    );
  }

  void _markAttendance(BuildContext context, WidgetRef ref, int tkbId, int studentId) async {
    try {
      await ref.read(markAttendanceProvider({"tkb_id": tkbId, "student_id": studentId}).future);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("ƒêi·ªÉm danh th√†nh c√¥ng!"), backgroundColor: Colors.green),
      );

      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ƒëi·ªÉm danh t·ª´ server
      ref.invalidate(attendanceListProvider(tkbId));
    } catch (e) {
      String errorMessage = "L·ªói ƒëi·ªÉm danh: $e";
      if (e.toString().contains("403")) {
        errorMessage = "ƒêi·ªÉm danh ƒë√£ ƒë√≥ng. Vui l√≤ng li√™n h·ªá gi·∫£ng vi√™n!";
      } else if (e.toString().contains("network")) {
        errorMessage = "L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra l·∫°i!";
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(errorMessage), backgroundColor: Colors.red),
      );
    }
  }
}